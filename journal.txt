================================================================================
<<<<<<< Updated upstream
=======
7/19/2021
--------------------------------------------------------------------------------
TODO:
- continue running riscv-tests
********************************************************************************
- edited memgen.sh to use riscv32-unknown-elf-ld to link assembly tests
	-> current configuration loads data memory initialization to 0x2000
	-> edit riscv32-unknown-elf-ld -Tdata parameter to change
- updated riscv-tests_tb; IMEM and DMEM are no longer separate memories
	-> now read from the same .mem file
- passed LW test
- fixed bug where IMEM_addr would increment by four before stopping on 'Stall' assert
	-> had the effect of stalling on next instruction

********************************************************************************
================================================================================

================================================================================
>>>>>>> Stashed changes
7/16/2021
--------------------------------------------------------------------------------
TODO:
- continue running riscv-tests
********************************************************************************
- wrote script memgen.sh to compile and riscv-tests assembly to object files; 
  then convert object files to hex using elf2hex and move mem files into /Mem
- updated testbench with all test programs
********************************************************************************
================================================================================

================================================================================
7/15/2021
--------------------------------------------------------------------------------
TODO:
- finish synchronous IMEM conversion
- continue running riscv-tests
********************************************************************************
- fully converted to sync IMEM; have to flush for an extra cycle on branches
  and jumps now
- passed add.S
- code cleanup and documentation
********************************************************************************
================================================================================

================================================================================
7/14/2021
--------------------------------------------------------------------------------
TODO:
- continue running riscv-tests
********************************************************************************
- passed and.S first try!
- passed auipc.S
- 
********************************************************************************
				TODAY’S BUG REPORTS

auipc.S
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=	
BUG: JAL stores PC+1 instead of PC+4 → EX_top.sv

 1c4: 004005ef            jal a1,1c8

	  → EXPECTED:
		[a1] = 1c4 + 4 = 1c8
	  → ACTUAL:
		[a1] = 1c4 + 1 = 1c5
	
 -> ALU source input always_comb
	 offending code: if(ID_Jump == 1) ALU_op2 = 32'd1; 
	 correction:     if(ID_Jump == 1) ALU_op2 = 32'd4;

Kind of scary that this is the first time I've noticed this. None of the other
tests run to date have used the register stored to by a jump.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=	
BUG: SUB INSTRUCTION GETS ADD ALU OP → ID_control.sv

 1c8: 40b50533            sub a0,a0,a1

	  → EXPECTED:
		[a0] = a0 - a1 
	  → ACTUAL:
		[a0] = a0 + a1
	
 -> Parameters, Registers, and Wires || Instruction Decoding
	 offending code: wire [6:0] FUNCT7;
                         ...
	                 assign FUNCT7 = IF_Instruction[31:25];
	 correction:     wire FUNCT7;
                         ...
                         assign FUNCT7 = IF_Instruction[30];

Another scary bug.
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=	

I made the decision to move the design from an asynchronous ROM for the IMEM to a 
synchronous one. This means the core needs to prefetch instructions; I'm sure 
the extra cycle will cause timing issues in the pipeline.


================================================================================



================================================================================
7/13/2021
--------------------------------------------------------------------------------
TODO:
- begin running riscv-tests
*******************************************************************************
- passed add.S
- passed andi.S

*******************************************************************************
				TODAY’S BUG REPORTS

add.S
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=	
BUG: BRANCH GEN TO INCORRECT TARGET → Branch_gen.sv
00000394 <test_20>:
 394:	00000213          	li	tp,0

00000398 <.L1#10>:
 398:	00d00093          	li	ra,13
 39c:	00b00113          	li	sp,11
 3a0:	00208733          	add	a4,ra,sp
 3a4:	00070313          	mv	t1,a4
 3a8:	00120213          	addi	tp,tp,1 # 1 <_start-0x3b>
 3ac:	00200293          	li	t0,2
 3b0:	fe5214e3          	bne	tp,t0,398 <.L1#10>            # BUG
 3b4:	01800393          	li	t2,24
 3b8:	01400193          	li	gp,20
 3bc:	2c731e63          	bne	t1,t2,698 <fail>
	-> 3b0 results in an endless loop
	@3b0
	→ EXPECTED:
		branch dest = 3b0 – 18 = 398
	→ ACTUAL:
		branch dest = 3b0 – 60 = 350
	
	ISSUE: Branch gen has old code

	offending code: `PC_RELATIVE: Branch_dest = PC + $signed(offset)*4;
		- stupid mistake
	correction:        `PC_RELATIVE: Branch_dest = PC + $signed(Immediate);
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
BUG: ID UNIT GENERATES INCORRECT JAL  TARGET → ID_control.sv
	→ EXPECTED:
		JAL jumps to PC + imm_J
	→ ACTUAL:
		JAL jumps to PC + imm_J, but target is not what it should be

	ISSUE: J-type immediate has incorrect format

	offending code: assign IMM_J = { {11{1'b0}}, IF_Instruction[31], IF_Instruction[19:12], 
                                          IF_Instruction[20], IF_Instruction[10:1], 1'b0};

	correction:     assign IMM_J = { {12{IF_Instruction[31]}}, IF_Instruction[19:12],IF_Instruction[20], 
                                          IF_Instruction[30:25],IF_Instruction[24:21], 1'b0};

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
BUG: EX UNIT BRANCHES AFTER JUMP → EX_top.sv
	→ EXPECTED:
		after a JAL, PC continues as normal
	→ ACTUAL:
		after a JAL, EX unit branches on next cycle

	ISSUE: Typo in EX stage

	offending code: if(ID_Jump == 1'b1) EX_PC_Branch <= 1;
	correction:        if(ID_Jump == 1'b1) EX_PC_Branch <= 0;

-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
BUG: HAZARD DETECTION STALLS ON NOP → Pipe_Hazard.sv
	→ EXPECTED:
		Stall IF and ID stages when an IF instruction depends on a load instruction in ID
	→ ACTUAL:
		IF and ID are stalled indefinitely on a NOP

	ISSUE: Probably stems from messy code, difficult to debug with current syntax, still needs to be looked at 

	offending code: <messy combinatorial logic in assign statement, see line 47 in commit cbefa53>
	correction:     replaced assign statement logic with always_comb and if-else, need to recheck 
			what it looks like in synthesis

==================================================================================================


==================================================================================================
7/12/2021
-----------------------------------------------
TODO:
- begin running riscv-tests
	- figure out a way to get objdump output
	  to Verilog $readmemh format
**********************************************
- branches_tb has bug in generating BGE instructions
	- LI loading incorrect values
	- otherwise all conditional branches are a-okay
- set up GTKWave translate filter process for RISCV instructions
	- also created a few translate filter files for
	      easier debugging
- cloned riscv-tests to Toast repo
- used riscv32-unknown-elf-elf2hex --bit-width 32 --input <input.o> 
  to convert tests compiled with riscv32-unknown-elf-gcc to verilog
  $readmemh format
=================================================

=================================================
7/9/2021
-----------------------------------------------
TODO:
- Test all branches and jumps in simulation
**********************************************
- built riscv-tests on Ubuntu 
	- compiled riscv-tests, a lot of tests 
          need branches or jumps just to function

- wrote a task to mimic psuedo-instruction LI
	-  m = (imm << 20) >> 20; 
           k = ((imm - m) >> 12) << 12; 
	- LUI(rd, k), then ADDI(rd, m)

- wrote testbench to test LUI and LI
	- testbench writes random values to 
	  random registers
	- self-checking
	-> TODO: add functional coverage (?)

- wrote testbench to test branches
	- task TEST_BRANCH writes random values based on 
	  input task (i.e. "BGE", "BEQ", etc) to randomly
          generated rd1 and rd2
	- self-checking, reports # of passes and fails
	- fails are reported along with time of failure

- BUGFIXES
	- PC module was not stopping on a pipeline stall
	- Hazard Detection was causing unnecessary stalls
	- Forwarding module did not have checks for whether
          instructions required forwarding
=================================================

=================================================
7/7/2021
-----------------------------------------------
TODO:
**********************************************
- Built riscv-tests using riscv32-unknown-elf
riscv32-unknown-elf-gcc -s <input.s>     -> compile 
riscv32-unknown-elf-objdump -D <input.o> -> examine assembly code
riscv32-unknown-elf-objcopy -O verilog <input.o> <output.vh> -> covert to verilog hex 

Now for an actual plan moving forward:
- Many riscv-tests tests need:
	- JAL/JALR
	- AUIPC
	- BEQ
	- BNEZ
I need to verify that these work in simulation, then
the goal is to try to get each test working.
Thus;
1) write directed tests for JAL, JALR, AUIPC, BEQ
2) simulate tests, verify baseline level of functionality
3) attempt to run riscv-tests, starting with simple.S
=================================================

=================================================
7/3/2021
-----------------------------------------------
TODO:
- implement JALR and remaining load/store instructions
- write testbenches for each instruction
**********************************************
- installed icarus verilog and gtkwave on Ubuntu
	- practiced with counter example
	- need to figure out how to write command file
          to test files in different directories
	- need to practice adding include directories 
	  to command file
	- need to learn how to translate data in GTKwave
	  for easier debugging (i.e. show instructions)
- modified IMEM module to load instruction data into
  every fourth address
- rebuilt riscv-gnu-toolchain to /usr/bin

=================================================


=================================================
7/2/2021
-----------------------------------------------
TODO:
- add test tasks for all currently implemented instructions
- implement JALR and remaining load/store instructions
**********************************************
- added test tasks for all currently implemented instructions


=================================================


=================================================
7/1/2021
-----------------------------------------------
TODO:
- update datapath diagram
- investigate testbench methods
**********************************************
- decided to abandon formal verification for now
- found example self-checking tests: https://github.com/4a1c0/RV32i-Verilog
- rewrote IMEM to allow testbench to write to array instead of reading from 
  text file
- wrote testbench for BEQ
	- fixed bug where branch generation in ID stage wasn't 
	  executing on the same cycle	
=================================================

=================================================
6/30/2021
-----------------------------------------------
TODO:
- make sure signals propagate correctly from stage to stage
  on each cycle before moving forward
- write basic test for branch / jump
- come up with basic memory interface for MEM stage
***********************************************
- added memory interface based on Xilinx Dual Port Block Memory (no AXI)
- added WB stage
- implemented MEM and WB stages into pipeline
- core is synthesizable
- wrote basic testbench for simulation
-> verifying via simulation will take wayyyyy too long and is too much work!
	-> going to have to learn how to use RVFI
=================================================




=================================================
6/29/2021
-----------------------------------------------
TODO:
- document hazard detection and forwarding changes
- general documentation
- look into RISC-V tests repo
- iverilog/verilator 
***********************************************
- setup RISC-V tests in WSL2
- wrote basic testbench for existing pipeline components
- simulated in Vivado XSim, fixed minor bugs
=================================================




=================================================
6/28/2021
------------------------------------------------
TODO:
- pipeline control signals for EX stage
- hazard detection stall
- forwarding
************************************************
- Implemented pipeline EX register
- Implemented load hazard detection 
   -> Hazard_detection should deassert all control signals, 
      inserting a NOP when an instruction from IF depends on 
      an OPCODE_LOAD instruction from ID

- Implemented control hazard detection
   -> Hazard_detection assumes branch not taken
   -> If a branch is taken, flush IF, ID, EX stages 
   -> If a jump is taken, flush IF and ID stages

- Implemented data hazard detection
   -> Forwarding module should detect when an instruction in
      ID stage depends on the result of an instruction
      in EX or MEM stage and mux in the data early, see truth table

- Moved Branch_gen from EX stage to ID stage
   -> Will reduce cost of jumps
=================================================




=================================================
6/27/2021
------------------------------------------------
TODO: 
- pipeline control signals for EX stage
- hazard detection stall
- forwarding
*********************************************
- Installed Windows Subsystem for Linux 2
- Installed bronzebeard assembler
- Installed Ubuntu 18.04 on WSL2
=================================================




=================================================
6/26/2021
*********************************************
Implemented Decoder/Control for ID pipeline stage

- ALU_source_sel -> alu gets regfile data or imm
- ALU_op -> alu operation to perform
- Branch_op -> branch gen operation to perform- Branch_flag -> branch on ALU 'set' or 'not set'
- Mem_wr_en -> enable data mem write
- Mem_rd_en -> enable data mem read
- RegFile_wr_en -> enable regfile writeback
- MemToReg -> enable regfile writeback from data mem
- Jump -> JAL or JALR unconditional branch
- Mem_op -> select memory mask for load/store byte/half-word/word

Implemented Control Signals for following OPCODES:
- OP
- IMM
- BRANCH
- LUI
- AUIPC
- JAL
- JALR
- LOAD
- STORE
=================================================
